#!/bin/bash

if [ ${DIB_DEBUG_TRACE:-1} -gt 0 ]; then
    set -x
fi
set -eu
set -o pipefail

function post_process()
{
    sudo mkimage -A $1 -O linux -T kernel -C none -a $UBOOT_KERNEL_ADDR -e $UBOOT_KERNEL_EP -n "Kernel" -d $KERNEL uImage
    sudo mv uImage $TARGET_ROOT/boot
    sudo mkimage -A $1 -O linux -T ramdisk -a 0 -n "RAMdisk" -C gzip -d $RAMDISK uInitrd
    sudo mv uInitrd $TARGET_ROOT/boot
}

function bootscript()
{
    sudo bash -c "cat >$TARGET_ROOT/boot/bootscript.txt" <<EOL
setenv bootargs 'console=ttyS0,9600n8 rw root=/dev/sda1'

printenv kernel_addr_r
printenv ramdisk_addr_r
printenv fdt_addr_r

ext4load scsi 0:1 \${kernel_addr_r} /boot/uImage
ext4load scsi 0:1 \${ramdisk_addr_r} /boot/uInitrd
bootm \${kernel_addr_r} \${ramdisk_addr_r} \${fdt_addr_r}
EOL

    sudo mkimage -T script -A arm -d $TARGET_ROOT/boot/bootscript.txt $TARGET_ROOT/boot.scr
}

UBOOT_KERNEL_ADDR=${UBOOT_KERNEL_ADDR:-0x80000}
UBOOT_KERNEL_EP=${UBOOT_KERNEL_EP:-0x80000}
[ -n "$TARGET_ROOT" ]

# Check if RAMDISK is being built.
if [ -f "$TARGET_ROOT/tmp/ramdisk" ] ; then
    KERNEL="$TARGET_ROOT/tmp/kernel"
    RAMDISK="$TARGET_ROOT/tmp/ramdisk"
else
    source "$_LIB/img-functions"
    # Dig up the initrd and kernel to use.
    select_boot_kernel_initrd "$TARGET_ROOT"
    KERNEL="$TARGET_ROOT/boot/$KERNEL"
    RAMDISK="$TARGET_ROOT/boot/$RAMDISK"
fi

case "$ARCH" in
    arm*)
        post_process arm
        bootscript
        ;;
esac
